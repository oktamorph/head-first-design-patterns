˜
_C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\Amplifier.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
	Amplifier 
{ 
private 
Tuner 
_tuner 
; 
private 
StreamingPlayer 
_player  '
;' (
public 
void 
On 
( 
) 
{ 	
Console		 
.		 
	WriteLine		 
(		 
$str		 ,
)		, -
;		- .
}

 	
public 
void 
Off 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str -
)- .
;. /
} 	
public 
void 
SetStreamingPlayer &
(& '
StreamingPlayer' 6
player7 =
)= >
{ 	
Console 
. 
	WriteLine 
( 
$str V
)V W
;W X
} 	
public 
void 
SetStereoSound "
(" #
)# $
{% &
}' (
public 
void 
SetSurroundSound $
($ %
)% &
{ 	
Console 
. 
	WriteLine 
( 
$str U
)U V
;V W
} 	
public 
void 
SetTuner 
( 
) 
{  
}! "
public 
void 
	SetVolume 
( 
int !
volume" (
)( )
{ 	
Console 
. 
	WriteLine 
( 
$"  
$str  <
{< =
volume= C
}C D
"D E
)E F
;F G
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
}   	
}!! 
}"" ‘
aC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\DuckAdapter.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
class 
DuckAdapter 
:  
ITurkey! (
{ 
readonly 
IDuck 
duck 
; 
readonly 
Random 
rand 
; 
public 
DuckAdapter 
( 
IDuck  
duck! %
)% &
{ 	
this		 
.		 
duck		 
=		 
duck		 
;		 
rand

 
=

 
new

 
Random

 
(

 
)

 
;

  
} 	
public 
void 
Gobble 
( 
) 
{ 	
duck 
. 
Quack 
( 
) 
; 
} 	
public 
void 
Fly 
( 
) 
{ 	
if 
( 
rand 
. 
Next 
( 
$num 
) 
== 
$num  !
)! "
duck 
. 
Fly 
( 
) 
; 
} 	
} 
} Ž
cC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\DuckTestDrive.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
class 
DuckTestDrive  
{ 
private 
static 
void 
TestDuck $
($ %
IDuck% *
duck+ /
)/ 0
{ 	
duck 
. 
Quack 
( 
) 
; 
duck 
. 
Fly 
( 
) 
; 
} 	
} 
} ü&
gC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\HomeTheaterFacade.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
HomeTheaterFacade "
{ 
private 
readonly 
	Amplifier "
_amp# '
;' (
private 
readonly 
Tuner 
_tuner %
;% &
private 
readonly 
StreamingPlayer (
_player) 0
;0 1
private 
readonly 
	Projector "

_projector# -
;- .
private		 
readonly		 
TheaterLights		 &
_lights		' .
;		. /
private

 
readonly

 
Screen

 
_screen

  '
;

' (
private 
readonly 
PopcornPopper &
_popper' .
;. /
public 
HomeTheaterFacade  
(  !
	Amplifier! *
amp+ .
,. /
Tuner0 5
tuner6 ;
,; <
StreamingPlayer= L
playerM S
,S T
	ProjectorU ^
	projector_ h
,h i
Screen 
screen 
, 
TheaterLights (
lights) /
,/ 0
PopcornPopper1 >
popper? E
)E F
{ 	
this 
. 
_amp 
= 
amp 
; 
this 
. 
_tuner 
= 
tuner 
;  
this 
. 
_player 
= 
player !
;! "
this 
. 

_projector 
= 
	projector '
;' (
this 
. 
_screen 
= 
screen !
;! "
this 
. 
_lights 
= 
lights !
;! "
this 
. 
_popper 
= 
popper !
;! "
} 	
public 
void 

WatchMovie 
( 
string %
movie& +
)+ ,
{ 	
Console 
. 
	WriteLine 
( 
$str =
)= >
;> ?
_popper 
. 
On 
( 
) 
; 
_popper 
. 
Pop 
( 
) 
; 
_lights 
. 
Dim 
( 
$num 
) 
; 
_screen 
. 
Down 
( 
) 
; 

_projector 
. 
On 
( 
) 
; 

_projector   
.   
WideScreenMode   %
(  % &
)  & '
;  ' (
_amp!! 
.!! 
On!! 
(!! 
)!! 
;!! 
_amp"" 
."" 
SetStreamingPlayer"" #
(""# $
_player""$ +
)""+ ,
;"", -
_amp## 
.## 
SetSurroundSound## !
(##! "
)##" #
;### $
_amp$$ 
.$$ 
	SetVolume$$ 
($$ 
$num$$ 
)$$ 
;$$ 
_player%% 
.%% 
On%% 
(%% 
)%% 
;%% 
_player&& 
.&& 
Play&& 
(&& 
movie&& 
)&& 
;&&  
}'' 	
public(( 
void(( 
EndMovie(( 
((( 
)(( 
{)) 	
Console** 
.** 
	WriteLine** 
(** 
$str** >
)**> ?
;**? @
_popper,, 
.,, 
Off,, 
(,, 
),, 
;,, 
_lights-- 
.-- 
On-- 
(-- 
)-- 
;-- 
_screen.. 
... 
Up.. 
(.. 
).. 
;.. 

_projector// 
.// 
Off// 
(// 
)// 
;// 
_amp00 
.00 
Off00 
(00 
)00 
;00 
_player11 
.11 
Stop11 
(11 
)11 
;11 
_player22 
.22 
Off22 
(22 
)22 
;22 
}33 	
public44 
void44 
ListenToRadio44 !
(44! "
)44" #
{44$ %
}44& '
public55 
void55 
EndRadio55 
(55 
)55 
{55  
}55! "
}66 
}77 Ý
jC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\HomeTheaterTestDrive.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class  
HomeTheaterTestDrive %
{ 
public 
static 
void 
Main 
(  
string  &
[& '
]' (
args) -
)- .
{ 	
	Amplifier 
amp 
= 
new 
	Amplifier  )
() *
)* +
;+ ,
Tuner 
tuner 
= 
new 
Tuner #
(# $
)$ %
;% &
StreamingPlayer		 
player		 "
=		# $
new		% (
StreamingPlayer		) 8
(		8 9
)		9 :
;		: ;
	Projector

 
	projector

 
=

  !
new

" %
	Projector

& /
(

/ 0
)

0 1
;

1 2
Screen 
screen 
= 
new 
Screen  &
(& '
)' (
;( )
TheaterLights 
lights  
=! "
new# &
TheaterLights' 4
(4 5
)5 6
;6 7
PopcornPopper 
popper  
=! "
new# &
PopcornPopper' 4
(4 5
)5 6
;6 7
HomeTheaterFacade 
homeTheater )
=* +
new, /
HomeTheaterFacade0 A
(A B
ampB E
,E F
tunerG L
,L M
playerN T
,T U
	projectorV _
,_ `
screena g
,g h
lightsi o
,o p
popperq w
)w x
;x y
homeTheater 
. 

WatchMovie "
(" #
$str# <
)< =
;= >
homeTheater 
. 
EndMovie  
(  !
)! "
;" #
} 	
} 
} Ú
[C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\IDuck.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
	interface 
IDuck 
{ 
public 
void 
Quack 
( 
) 
; 
public 
void 
Fly 
( 
) 
; 
} 
} ß
]C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\ITurkey.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
	interface 
ITurkey 
{ 
public 
void 
Gobble 
( 
) 
; 
public 
void 
Fly 
( 
) 
; 
} 
} –
aC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\MallardDuck.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
class 
MallardDuck 
:  
IDuck! &
{ 
public 
void 
Quack 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str %
)% &
;& '
} 	
public		 
void		 
Fly		 
(		 
)		 
{

 	
Console 
. 
	WriteLine 
( 
$str *
)* +
;+ ,
} 	
} 
} æ	
cC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\PopcornPopper.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
PopcornPopper 
{ 
public 
void 
On 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str 1
)1 2
;2 3
} 	
public		 
void		 
Off		 
(		 
)		 
{

 	
Console 
. 
	WriteLine 
( 
$str 2
)2 3
;3 4
} 	
public 
void 
Pop 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str ?
)? @
;@ A
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} Þ
_C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\Projector.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
	Projector 
{ 
private 
StreamingPlayer 
_player  '
;' (
public 
void 
On 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str ,
), -
;- .
}		 	
public

 
void

 
Off

 
(

 
)

 
{ 	
Console 
. 
	WriteLine 
( 
$str -
)- .
;. /
} 	
public 
void 
TvMode 
( 
) 
{ 
}  
public 
void 
WideScreenMode "
(" #
)# $
{ 	
Console 
. 
	WriteLine 
( 
$str P
)P Q
;Q R
} 	
public 
void 
SetInput 
( 
StreamingPlayer ,
player- 3
)3 4
{5 6
}7 8
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} ì
\C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\Screen.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
Screen 
{ 
public 
void 
Up 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str 7
)7 8
;8 9
} 	
public		 
void		 
Down		 
(		 
)		 
{

 	
Console 
. 
	WriteLine 
( 
$str 9
)9 :
;: ;
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} °
eC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\StreamingPlayer.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
StreamingPlayer  
{ 
private 
string 
? 
_movie 
; 
private 
	Amplifier 

_amplifier $
;$ %
public 
void 
On 
( 
) 
{ 	
Console		 
.		 
	WriteLine		 
(		 
$str		 3
)		3 4
;		4 5
}

 	
public 
void 
Off 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str 4
)4 5
;5 6
} 	
public 
void 
Pause 
( 
) 
{ 
} 
public 
void 
Play 
( 
string 
movie  %
)% &
{ 	
_movie 
= 
movie 
; 
Console 
. 
	WriteLine 
( 
$"  
$str  ;
{; <
_movie< B
}B C
$strC E
"E F
)F G
;G H
} 	
public 
void 
SetSurroundAudio $
($ %
)% &
{' (
}) *
public 
void 
SetTwoChannelAudio &
(& '
)' (
{) *
}+ ,
public 
void 
Stop 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$"  
$str  ;
{; <
_movie< B
}B C
$strC E
"E F
)F G
;G H
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
}   ò	
cC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\TheaterLights.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
TheaterLights 
{ 
public 
void 
On 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str 9
)9 :
;: ;
} 	
public		 
void		 
Off		 
(		 
)		 
{		 
}		 
public

 
void

 
Dim

 
(

 
int

 
light

 !
)

! "
{ 	
Console 
. 
	WriteLine 
( 
$"  
$str  B
{B C
lightC H
}H I
$strI J
"J K
)K L
;L M
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} ®	
[C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\Tuner.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
public 

class 
Tuner 
{ 
private 
	Amplifier 

_amplifier $
;$ %
public 
void 
On 
( 
) 
{ 
} 
public 
void 
Off 
( 
) 
{ 
} 
public 
void 
SetAm 
( 
) 
{ 
} 
public		 
void		 
SetFm		 
(		 
)		 
{		 
}		 
public

 
void

 
SetFrequency

  
(

  !
)

! "
{

# $
}

% &
public 
override 
string 
ToString '
(' (
)( )
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} ™

cC:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\TurkeyAdapter.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
class 
TurkeyAdapter  
:! "
IDuck# (
{ 
ITurkey 
turkey 
; 
public 
TurkeyAdapter 
( 
ITurkey $
turkey% +
)+ ,
{ 	
this 
. 
turkey 
= 
turkey  
;  !
}		 	
public

 
void

 
Quack

 
(

 
)

 
{ 	
turkey 
. 
Gobble 
( 
) 
; 
} 	
public 
void 
Fly 
( 
) 
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
$num  
;  !
i" #
++# %
)% &
{ 
turkey 
. 
Fly 
( 
) 
; 
} 
} 	
} 
} —
`C:\Users\obolilyi\source\repos\head-first-design-patterns\AdapterAndFacadePatterns\WildTurkey.cs
	namespace 	$
AdapterAndFacadePatterns
 "
{ 
internal 
class 

WildTurkey 
: 
ITurkey  '
{ 
public 
void 
Gobble 
( 
) 
{ 	
Console 
. 
	WriteLine 
( 
$str -
)- .
;. /
} 	
public		 
void		 
Fly		 
(		 
)		 
{

 	
Console 
. 
	WriteLine 
( 
$str ;
); <
;< =
} 	
} 
} 